pragma solidity ^0.4.23;
contract CheckChain {
    
    function stringToBytes32(string memory source)
    public pure returns (bytes32 result) {
        bytes memory tempEmptyStringTest = bytes(source);
        if (tempEmptyStringTest.length == 0) {
            return 0x0;
        }
        assembly {
            result := mload(add(source, 32))
        }
    }
    
    function bytes32ToString(bytes32 x)
    public pure returns (string) {
        bytes memory bytesString = new bytes(32);
        uint charCount = 0;
        for (uint j = 0; j < 32; j++) {
            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));
            if (char != 0) {
                bytesString[charCount] = char;
                charCount++;
            }
        }
        bytes memory bytesStringTrimmed = new bytes(charCount);
        for (j = 0; j < charCount; j++) {
            bytesStringTrimmed[j] = bytesString[j];
        }   
        return string(bytesStringTrimmed);
    }

    address admin;
    mapping (bytes32 => Student) certificates;

    struct Student {
    bytes32 firstName;
    bytes32 lastName;
    }
    
    constructor() public {
        admin = msg.sender;
    }

    function addCert (string _hash, string _firstName, string _lastName)
    public {
        require (msg.sender == admin);

        certificates [stringToBytes32(_hash)] =
            Student(stringToBytes32(_firstName), stringToBytes32(_lastName));
    }
    
    function checkCert (string _hash)
    public view returns (string, string) {
        return (
                bytes32ToString(certificates[stringToBytes32(_hash)].firstName),
                bytes32ToString(certificates[stringToBytes32(_hash)].lastName)
            );
    }
    
}
